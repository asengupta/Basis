**NOTE: Starting from version 0.5.1, Basis has been ported to Ruby 1.9.2, because of the kd-tree library dependency. There are no current plans of maintaining Basis compatibility with Ruby 1.8.x.**

**Basis** provides a set of classes for easily plotting and transforming arbitrary 2D coordinate systems by specifying their basis vectors. Originally developed to work with Ruby-Processing, it now supports any class which supports Processing-like semantics.

Starting from version 0.5.0, experimental support has been added for mouseover interactivity without (too much) extra effort on your part. This is still a work in progress, though.

## Installation

To install the Basis gem, first head to the location where the jruby-complete.jar is located, for Ruby-Processing. There, do this:

    java -jar jruby-complete.jar -S gem install basis-processing --user-install

Alternatively, if you're using a conventional JRuby installation, do this:

    sudo jruby -S gem install basis-processing

To use Basis functionality in your code, it is enough to:

    require 'basis_processing'

## Example Code

Here's some example code, which plots random points.

	require 'rubygems'

	Gem.clear_paths
	ENV['GEM_HOME'] = '/home/avishek/jruby/jruby-1.6.4/lib/ruby/gems/1.8'
	ENV['GEM_PATH'] = '/home/avishek/jruby/jruby-1.6.4/lib/ruby/gems/1.8'

	require 'basis_processing'

	class Demo < Processing::App
		app = self
		def setup
			smooth
			no_loop
			background(0,0,0)
			color_mode(RGB, 1.0)
			stroke(1,1,0,1)
			@highlight_block = lambda do |p|
						rect_mode(CENTER)
						stroke(1,0,0)
						fill(1,0,0)
						rect(p[:x], p[:y], 5, 5)
					   end

			@passive_block = lambda do |p|
						rect_mode(CENTER)
						stroke(1,1,0,1)
						fill(1,1,0)
						rect(p[:x], p[:y], 5, 5)
					   end

			points = []
			200.times {|n|points << {:x => n, :y => random(300)}}

			x_basis_vector = {:x => 1.0, :y => 0.0}
			y_basis_vector = {:x => 0.2, :y => 1.0}

			x_range = ContinuousRange.new({:minimum => 0, :maximum => 200})
			y_range = ContinuousRange.new({:minimum => 0, :maximum => 300})

			@basis = CoordinateSystem.new(Axis.new(x_basis_vector,x_range), Axis.new(y_basis_vector,y_range), [[1,0],[0,1]], self)
			screen_transform = Transform.new({:x => 3, :y => -2}, {:x => 300, :y => 900})
			@screen = Screen.new(screen_transform, self, @basis)
			@screen.join=true
			@screen.draw_axes(10,10)
			stroke(1,1,0,1)
			fill(1,1,0)
			rect_mode(CENTER)
			points.each do |p|
				@screen.plot(p, :track => true) {|p| rect(p[:x], p[:y], 5, 5)}
			end
		end
	end

	w = 1200
	h = 1000

	Demo.send :include, Interactive
	Demo.new(:title => "My Sketch", :width => w, :height => h)

You have a few options when plotting a point. If you specify ':bar => true', like the line below:

	screen.plot(p, basis, :bar => true) {|p| rect(p[:x], p[:y], 5, 5)}

it will connect the point with the x-axis. If you omit `:bar => true` or don't specify any options, Basis will plot the points without connecting them to the X-axis.
If you omit the block at the end of the call, Basis will plot the point using a circle. Use the block to customise how you wish to represent the point graphically.
You can toggle the joining of the points with lines by setting the join attribute of Screen to on (joins points)/off (no joining). The default is false.

## Running the Code (with extra notes for versions >= 0.5.1)

Running the code is as simple as typing:

`rp5 run demo.rb`

If you're not using the Gems-in-a-Jar approach, you might have to use:

`rp5 run --jruby demo.rb`

The reason for the `--jruby` switch is to force Ruby-Processing to use the installed version of JRuby, instead of it's own jruby-complete.jar

Additionally, starting with version 0.5.1, you will have to specify the environment variable JRUBY_OPTS to force JRuby to use the 1.9 version of the interpreter, like so:

`export JRUBY_OPTS=--1.9`

## Notes on Interactivity

Experimental support exists for mouseover interactivity without (too much) extra effort on your part. To allow interactions to happen, you must specify ':track => true' while plotting a point, as in the line below:

	@screen.plot(p, :track => true) {|p| rect(p[:x], p[:y], 5, 5)}

To actually enable interactivity, you must do a few things:

* 'include' the Interactive module in your sketch class, as in the demonstration code above, namely the line `Demo.send :include, Interactive`
* `@highlight_block` specifies what to plot when the data point is hovered upon.

Interactivity is a work in progress at the moment; some of the above steps may change or be removed.

